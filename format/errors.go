package format

import (
	"errors"
	"fmt"

	"google.golang.org/grpc/status"

	zErrors "github.com/zostay/zedpm/pkg/errors"
)

// WrapError is a generic error wrapper generated by the WrapErr function.
type WrapError struct {
	msg string
	err error
}

// Error returns the formatted error message.
func (err *WrapError) Error() string {
	return err.msg
}

// Unwrap provides the inner error.
func (err *WrapError) Unwrap() error {
	return err.err
}

// WrapErr returns a wrapped error. The wrapped error will be reformatted using
// FormatErr because some error handlers are determined to make their errors
// difficult for humans to read and understand.
func WrapErr(err error, msg string, args ...any) error {
	fmtMsg := fmt.Sprintf(msg, args...)
	return &WrapError{
		err: err,
		msg: fmt.Sprintf("%s: %v", fmtMsg, Err(err)),
	}
}

type sliceUnwrap interface {
	Unwrap() []error
}

// Err returns the error's string, but may also reformat that error string to be
// a little more human-friendly.
//
// In particular, it returns the gRPC status message only if the message is a
// gRPC error. Otherwise, those errors output a lot of mostly useless line noise
// in addition to the error message.
func Err(err error) string {
	// Pretty up types that have an Unwrap() []error method... as per go1.20
	var sliceErr sliceUnwrap
	if errors.As(err, &sliceErr) {
		errs := sliceErr.Unwrap()
		newErr := make(zErrors.SliceError, len(errs))
		for i, err := range errs {
			newErr[i] = fmt.Errorf(Err(err))
		}
		err = newErr
	}

	// google.golang.org/grpc formats its errors in basically the ugliest way
	// possible, so let's not let them format their own errors.
	if status, ok := status.FromError(err); ok {
		return status.Message()
	}

	return err.Error()
}
