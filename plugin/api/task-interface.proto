syntax = "proto3";
package zedpm.plugin;

option go_package = "./api";

// TODO Should Config values be passed as JSON or something to allow the values to be parsed consistently?

// Config is used to pass properties from the master process to each plugin and
// also for each plugin to pass changes back upstream to the master.
message Config {
  // The values are string property values. Each key is a dot-separated string
  // of keys and sub-keys. The values are the best serialized value for the
  // value to set.
  map<string, string> values = 3;
}

// Descriptor provides definitions defining the goals and tasks supported by a
// plugin.
message Descriptor {
  // Descriptor.Goal describes a goal.
  message Goal {
    // This is the name of the goal.
    string name = 1;

    // This is a short description of what the goal is meant to archive.
    string short = 2;

    // This is a list of zero or more aliases that can be used to perform this
    // same goal.
    repeated string aliases = 3;
  }

  // Descriptor.Task describes a task, which is part of a goal.
  message Task {
    // This is the full path describing the name of the task. The first element
    // of the path should be the name of the goal this task belongs to and the
    // path must start with a slash.
    string name = 2;

    // This is the short description of what the task does. This should be a
    // very short phrase.
    string short = 3;

    // This is a list of zero or more task paths of tasks that must be performed
    // prior to executing this task. These other tasks must be in the same goal.
    repeated string requires = 4;
  }
}

// Task is just a namespace container for task-related messages.
message Task {
  // Task.Implements is a namespace container for task implementation messages.
  message Implements {
    // Task.Implements.Response is the response for the Implements() function.
    message Response {
      // This is the list of task descriptors for all tasks implemented by a
      // plugin.
      repeated Descriptor.Task tasks = 1;
    }

    // Task.Implements.Request is the request passed to the Implements()
    // function.
    message Request {
    }
  }

  // Task.Goal is a namespace container for goal definition mesages.
  message Goal {
    // Task.Goal.Response is the response for the Goal() function.
    message Response {
      // This is the definition for the goal.
      Descriptor.Goal definition = 1;
    }

    // Task.Goal.Request is the request for the Goal() function.
    message Request {
      // This is the name of the goal to request information about.
      string name = 1;
    }
  }

  // Task.Ref is used to refer to a task state while executing an task.
  message Ref {
    // This is the name of the task being executed.
    string name = 1;

    // This is an arbitrary identifier used to identify which plugin state is
    // being executed.
    string state_id = 2;
  }

  // Task.Prepare is the namespace container for messages used with the
  // Prepare() function.
  message Prepare {
    // Task.Prepare.Request is the request passed to the Prepare() function.
    message Request {
      // This is the name of the task to execute.
      string name = 1;

      // This is the global configuration to use with this task.
      Config global_config = 2;
    }

    // Task.Prepare.Response is the response returned from the Prepare()
    // function.
    message Response {
      // This is the task reference that will need to be passed when executing
      // each operation of the task.
      Task.Ref task = 1;

      // This contains any initial storage updates that the plugin wishes to add
      // to the properties used while executing this task.
      map<string, string> storage = 2;
    }
  }

  // Task.Cancel is the namespace container for messages used with the Cancel()
  // function.
  message Cancel {
    // Task.Cancel.Request is the request object to pass to the Cancel()
    // function.
    message Request {
      // This is the task state to cancel.
      Task.Ref task = 1;

      // This is the latest storage provided to the plugin.
      map<string, string> storage = 2;

      // This is the list of all files added by tass to this point.
      repeated string added_files = 3;
    }

    // Task.Cancel.Response is the response object returned from Cancel().
    message Response {
    }
  }

  // Task.Complete is the namespace container for messages used with Complete().
  message Complete {
    // Task.Complete.Request is the request object to pass to Complete().
    message Request {
      // This is the task state to mark completed.
      Task.Ref task = 1;

      // This is the latest storage provided to the plugin.
      map<string, string> storage = 2;

      // This is the list of files added by all tasks to this point.
      repeated string added_files = 3;
    }

    // Task.Complete.Response is the response object returned from Complete().
    message Response {
    }
  }

  // Task.Operation is the namespace container for various operation calls.
  message Operation {
    // Task.Operation.Request describes the operation state for execution.
    message Request {
      // This is the task state in which to perform the operation.
      Task.Ref task = 1;

      // This is the storage as updated during the previous stage.
      map<string, string> storage = 2;

      // This is the list of files that have been added to this point.
      repeated string added_files = 3;
    }

    // Task.Operation.Response describes the result for an execution.
    message Response {
      // This is the properties to apply to storage for use with the next
      // stage.
      map<string, string> storage_update = 2;

      // This returns a list of files that have been modified that will need
      // their changes added to version control.
      repeated string added_files = 3;
    }
  }

  // Task.SubStage is the namespace container for sub-stage operations.
  message SubStage {
    // Task.SubStage.Response is the response from preparing a
    // prioritized-operation stage.
    message Response {
      // These are the priority stages that this plugin implements for this
      // task.
      repeated int32 provided_orders = 1;
    }

    // Task.SubStage>Request is the request to initiate a sub-stage operation.
    message Request {
      // This is the operation to request.
      Operation.Request request = 1;

      // This is the sub-stage of tha toperation to execute.
      int32 sub_stage = 2;
    }
  }
}

// TaskExecution is the service implemented by all zedpm plugins.
service TaskExecution {
  // Implements maps onto the plugin.Interface.Implements method.
  rpc Implements(Task.Implements.Request) returns (Task.Implements.Response) {}

  // Goal maps onto the plugin.Interface.Goal method.
  rpc Goal(Task.Goal.Request) returns (Task.Goal.Response) {}

  // Prepare maps onto the plugin.Interface.Prepare method.
  rpc Prepare(Task.Prepare.Request) returns (Task.Prepare.Response) {}

  // Cancel maps onto the plugin.Interface.Cancel method.
  rpc Cancel(Task.Cancel.Request) returns (Task.Cancel.Response) {}

  // Complete maps onto the plugin.Interface.Complete method.
  rpc Complete(Task.Complete.Request) returns (Task.Complete.Response) {}

  // ExecuteCheck maps onto the plugin.Task.Check method.
  rpc ExecuteCheck(Task.Operation.Request) returns (Task.Operation.Response) {}

  // PrepareBegin maps onto the plugin.Task.Begin method.
  rpc PrepareBegin(Task.Ref) returns (Task.SubStage.Response) {}

  // ExecuteBegin executes operations related to the plugin.Task.Begin method.
  rpc ExecuteBegin(Task.SubStage.Request) returns (Task.Operation.Response) {}

  // PrepareRun maps onto the plugin.Task.Run method.
  rpc PrepareRun(Task.Ref) returns (Task.SubStage.Response) {}

  // ExecuteRun executes operations related to the plugin.Task.Run method.
  rpc ExecuteRun(Task.SubStage.Request) returns (Task.Operation.Response) {}

  // PrepareEnd maps onto the plugin.Task.End method.
  rpc PrepareEnd(Task.Ref) returns (Task.SubStage.Response) {}

  // ExecuteEnd executes operations related to the plugin.Task.End method.
  rpc ExecuteEnd(Task.SubStage.Request) returns (Task.Operation.Response) {}

  // ExecuteFinish maps onto the plugin.Task.Finish method.
  rpc ExecuteFinish(Task.Operation.Request) returns (Task.Operation.Response) {}
}
